{"version":3,"sources":["reducers/tableData.js","reducers/index.js","actions/actionTypes.js","api/index.js","sagas/tableData.js","sagas/index.js","store/initialState.js","components/navHeader/NavHeader.js","components/datatable/DataTableStyledComponents.js","utils/formatForDisplay.js","components/datatable/ColumnHeading.js","components/graph/Graph.js","components/datatable/DataCellGraph.js","components/datatable/DataCellCampaignId.js","components/datatable/DataTable.js","actions/actionCreators.js","components/loader/Loader.js","components/error/ErrorDisplay.js","components/home/card/Head.js","components/home/card/Card.js","components/home/Home.js","App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["initialState","data","fetched","error","errorMsg","combineReducers","tableData","reducerTableData","state","action","type","payload","api","url","method","fetch","then","response","ok","json","catch","fetchTableData","listenForGetTableData","endpoint","process","call","receivedData","put","failedAction","takeLeading","rootSaga","all","HeaderDiv","styled","div","FontAwesomeIconStyled","FontAwesomeIcon","NavHeader","data-testid","icon","faBars","GlobalStyle","createGlobalStyle","numberFormatOptions","minimumFractionDigits","maximumFractionDigits","formatCurrencyForDisplay","number","Number","toLocaleString","formatDateForDisplay","value","date","Date","month","toDateString","substring","formatNumberRank","getDate","getFullYear","isOpen","rest","props","TableHeadingCell","th","isGraphHeader","TotalAmount","h4","ColumnHeading","React","memo","text","columnKey","total","reduce","totalCollect","campaignItem","trend","campaignTotal","dayItem","key","data-tip","data-for","faCaretDown","onClick","handleToggleColumnShow","dangerouslySetInnerHTML","__html","utils","id","place","effect","defaultProps","graphStaticOptions","chart","height","margin","credits","enabled","title","legend","xAxis","labels","tickLength","lineColor","yAxis","gridLineWidth","plotOptions","series","fillColor","color","marker","radius","tooltip","formatter","this","y","Graph","options","highcharts","Highcharts","TotalHeading","DataCellStyled","DataCellGraph","columnObject","rowData","style","graphData","map","dayData","day","console","log","className","prevProps","nextProps","sha256","JSON","stringify","toString","TextIdStyled","span","DataCellCampaignId","size","faAngleRight","dataTableGraphRecords","heading","TableStyled","table","HeaderRowStyled","tr","DataTable","show","useState","campaignColumnOpen","setCampaignColumnOpen","Array","length","fill","graphColumnsOpenArray","setGraphColumnsOpenArray","Cell","columnIndex","rowIndex","isCampaignColumnOpen","groups","Campaign","metadata","name","handleToggleCampaignIdColumnShow","prev","window","dispatchEvent","Event","item","index","handleToggleGraphColumnShow","slice","concat","width","columnCount","rowCount","rowHeight","columnWidth","requestTableData","LoaderStyled","Loader","align","ErrorDisplay","message","propTypes","PropTypes","string","isRequired","HeadStyled","HeadingText","h3","HeadingSubText","isLoading","Head","subtitle","faRedoAlt","CardStyled","CardBody","Card","children","func","bool","object","connect","mapStateToProps","mapDispatchToProps","dispatch","requestTableDataAction","bindActionCreators","requestTableDataFunctions","Home","startingDate","extractStartingDate","endingDate","extractEndingDate","useCallback","useEffect","App","Boolean","location","hostname","match","store","configureStore","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","compose","applyMiddleware","logger","run","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","registration"],"mappings":"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","file":"static/js/main.47e29ef1.chunk.js","sourcesContent":["import {\n  REQUEST_TABLE_DATA,\n  SUCCESS_TABLE_DATA,\n  ERROR_TABLE_DATA,\n} from \"../actions/actionTypes\"\n\nconst initialState = {\n  data: [],\n  fetched: false,\n  error: null,\n  errorMsg: null,\n}\n\nexport default function reducerTableData(state = initialState, action) {\n  switch (action.type) {\n    case REQUEST_TABLE_DATA: {\n      return {\n        ...state,\n        data: [],\n        fetched: false,\n        error: null,\n        errorMsg: null,\n      }\n    }\n    case SUCCESS_TABLE_DATA: {\n      const tableData = action.payload.data.data\n      return {\n        ...state,\n        data: tableData,\n        fetched: true,\n        error: null,\n        errorMsg: null,\n      }\n    }\n    case ERROR_TABLE_DATA: {\n      return {\n        ...state,\n        data: [],\n        fetched: true,\n        error: action.payload.error,\n        errorMsg: \"Couldn't Fetch Data\",\n      }\n    }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from \"redux\"\nimport tableData from \"./tableData\"\n\nexport default combineReducers({ tableData })\n","export const REQUEST_TABLE_DATA = \"REQUEST_TABLE_DATA\"\nexport const SUCCESS_TABLE_DATA = \"SUCCESS_TABLE_DATA\"\nexport const ERROR_TABLE_DATA = \"ERROR_TABLE_DATA\"\n","import fetch from \"isomorphic-fetch\"\n\nconst api = (url, method = \"GET\") =>\n  fetch(url, { method })\n    .then((response) => {\n      if (!response.ok) {\n        throw response // Send \"bad\" response to catch()\n      } else {\n        return response.json()\n      }\n    })\n    .then((response) => ({ ...response, ...{ ok: true } }))\n    .catch((response) => ({ ...response, ...{ ok: false } }))\n\nexport default api\n","import { call, put, takeLeading } from \"redux-saga/effects\"\nimport api from \"api\"\nimport {\n  REQUEST_TABLE_DATA,\n  SUCCESS_TABLE_DATA,\n  ERROR_TABLE_DATA,\n} from \"actions/actionTypes\"\n\nconst BASE_URL = process.env.REACT_APP_BASE_API_URL\n\nexport function* fetchTableData(action) {\n  try {\n    const endpoint = `${BASE_URL}/frontend-assignment/1000+items+table+response.json`\n    const receivedData = yield call(api, endpoint)\n    if (receivedData.ok) {\n      yield put({\n        type: SUCCESS_TABLE_DATA,\n        payload: { data: receivedData },\n      })\n    } else {\n      throw receivedData\n    }\n  } catch (err) {\n    yield put({\n      type: ERROR_TABLE_DATA,\n      payload: { error: err, failedAction: action },\n    })\n  }\n}\n\nexport function* listenForGetTableData() {\n  yield takeLeading(REQUEST_TABLE_DATA, fetchTableData)\n}\n","import { all } from \"redux-saga/effects\"\nimport { listenForGetTableData } from \"./tableData\"\n\nexport default function* rootSaga() {\n  yield all([listenForGetTableData()])\n}\n","export default {\n  tableData: {},\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\"\n// import ClarisightsLogo from \"../../images/clarisightsLogo.svg\"\n\nconst HeaderDiv = styled.div`\n  background-color: #7986cb;\n  padding: 15px 25px;\n  border-bottom: 1px solid #d3d3d3;\n  box-shadow: #d9d9d9 2px 2px 4px 0px;\n  min-height: 25px;\n`\n// const ImgLogo = styled.img`\n//   vertical-align: middle;\n// `\nconst FontAwesomeIconStyled = styled(FontAwesomeIcon)`\n  float: right;\n  margin-top: 4px;\n  cursor: pointer;\n`\n\nfunction NavHeader() {\n  return (\n    <HeaderDiv data-testid=\"navHeader\">\n      {/* <ImgLogo src={ClarisightsLogo} /> */}\n      <FontAwesomeIconStyled icon={faBars} />\n    </HeaderDiv>\n  )\n}\nexport default NavHeader\n","import { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyle = createGlobalStyle`\n  td, th {\n    border: 1px solid #d0d0d0;\n    border-collapse: collapse;\n    transition: max-width 1s ease;\n  }\n`\nexport default GlobalStyle\n","const numberFormatOptions = {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 2,\n}\n\nconst formatNumberRank = (value) => {\n  if (value === 1) return \"<span>1<sup>st</sup></span>\"\n  if (value === 2) return \"<span>2<sup>nd</sup></span>\"\n  if (value === 3) return \"<span>3<sup>rd</sup></span>\"\n  return `<span>${value}<sup>th</sup></span>`\n}\n\nexport const formatCurrencyForDisplay = (number) => {\n  return `&euro;&nbsp;${Number(number).toLocaleString(\n    \"en\",\n    numberFormatOptions\n  )}`\n}\n\nexport const formatDateForDisplay = (value) => {\n  if (value) {\n    const date = new Date(value)\n    const month = date.toDateString().substring(4, 7)\n    return `${formatNumberRank(date.getDate())}${month} ${date.getFullYear()}`\n  }\n  return \"\"\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport ReactTooltip from \"react-tooltip\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faCaretDown } from \"@fortawesome/free-solid-svg-icons\"\nimport * as utils from \"utils\"\n\nconst FontAwesomeIconStyled = styled(({ isOpen, ...rest }) => (\n  <FontAwesomeIcon {...rest} />\n))`\n  cursor: pointer;\n  transform: ${(props) => (props.isOpen ? null : \"rotate(-90deg)\")};\n`\n\nconst TableHeadingCell = styled.th`\n  padding: 10px;\n  text-align: right;\n  width: ${(props) => (props.isOpen ? \"auto\" : \"150px\")};\n  color: #4b4b4b;\n  font-weight: normal;\n  padding-bottom: ${(props) => (props.isGraphHeader ? \"10px\" : \"25px\")};\n`\n\nconst TotalAmount = styled.h4`\n  margin: 0px;\n  color: #7f7f7f;\n  font-weight: normal;\n`\n\nconst ColumnHeading = React.memo((props) => {\n  const { text, columnKey, data, isGraphHeader, isOpen } = props\n  const total =\n    isGraphHeader &&\n    data.reduce(\n      (totalCollect, campaignItem) =>\n        totalCollect +\n        campaignItem.trend.reduce(\n          (campaignTotal, dayItem) => campaignTotal + dayItem[columnKey],\n          0\n        ),\n      0\n    )\n  return (\n    <TableHeadingCell isGraphHeader={isGraphHeader} isOpen={isOpen}>\n      {text}{\" \"}\n      <FontAwesomeIconStyled\n        key={isOpen ? \"is-open\" : \"not-open\"}\n        data-tip\n        data-for=\"columnCollapseTooltip\"\n        isOpen={isOpen}\n        icon={faCaretDown}\n        onClick={props.handleToggleColumnShow}\n      />\n      {isGraphHeader && (\n        <TotalAmount\n          dangerouslySetInnerHTML={{\n            __html: utils.formatCurrencyForDisplay(total),\n          }}\n        />\n      )}\n      {isOpen && (\n        <ReactTooltip id=\"columnCollapseTooltip\" place=\"bottom\" effect=\"solid\">\n          <span>Hide Column</span>\n        </ReactTooltip>\n      )}\n      {!isOpen && (\n        <ReactTooltip id=\"columnCollapseTooltip\" place=\"bottom\" effect=\"solid\">\n          <span>Show Column</span>\n        </ReactTooltip>\n      )}\n    </TableHeadingCell>\n  )\n})\n\nColumnHeading.propTypes = {\n  text: PropTypes.string.isRequired,\n  columnKey: PropTypes.string,\n  data: PropTypes.array,\n  isGraphHeader: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  handleToggleColumnShow: PropTypes.func.isRequired,\n}\n\nColumnHeading.defaultProps = {\n  columnKey: \"\",\n  data: [],\n}\n\nexport default ColumnHeading\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Highcharts from \"highcharts\"\nimport HighchartsReact from \"highcharts-react-official\"\nimport \"./graph.css\"\n\nconst graphStaticOptions = {\n  chart: {\n    type: \"area\",\n    height: `${(7 / 16) * 100}%`,\n    margin: 0,\n  },\n  credits: { enabled: false },\n  title: false,\n  legend: {\n    enabled: false,\n  },\n  xAxis: {\n    labels: {\n      enabled: false,\n    },\n    title: false,\n    tickLength: 0,\n    lineColor: \"transparent\",\n  },\n  yAxis: {\n    labels: {\n      enabled: false,\n    },\n    title: false,\n    gridLineWidth: 0,\n  },\n  plotOptions: {\n    series: {\n      fillColor: \"#eaebfe\",\n      color: \"#c8c9ff\",\n      marker: {\n        radius: 2.5,\n      },\n    },\n  },\n  tooltip: {\n    formatter() {\n      return `\n              <span class=\"graphTooltipValue\">Value: ${this.y}</span>\n              <br/>\n              <span class=\"graphTooltipDate\">Date: ${this.key} </span> \n               `\n    },\n  },\n}\n\nconst Graph = React.memo((props) => {\n  const options = {\n    ...graphStaticOptions,\n    series: [\n      {\n        data: props.data,\n      },\n    ],\n  }\n\n  return (\n    <HighchartsReact\n      data-testid=\"highChartGraph\"\n      highcharts={Highcharts}\n      options={options}\n    />\n  )\n})\n\nGraph.propTypes = {\n  data: PropTypes.array.isRequired,\n}\n\nexport default Graph\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport sha256 from \"crypto-js/sha256\"\nimport Graph from \"components/graph\"\nimport * as utils from \"utils\"\n\nconst TotalHeading = styled.h4`\n  position: absolute;\n  z-index: 1;\n  font-weight: normal;\n  right: 20px;\n  top: -5px;\n  text-align: right;\n  color: #3f3f3f;\n`\n\nconst DataCellStyled = styled.div`\n  position: relative;\n  padding: 10px;\n  width: auto;\n  padding-top: 30px;\n`\n\nconst DataCellGraph = React.memo(\n  ({ columnObject, rowData, isOpen, style }) => {\n    const graphData = rowData.trend.map((dayData) => [\n      dayData.day,\n      dayData[columnObject.key],\n    ])\n    const total = rowData.trend.reduce(\n      (totalCollect, dayData) => totalCollect + dayData[columnObject.key],\n      0\n    )\n    // eslint-disable-next-line no-console\n    console.log(\"Rendering DataCellGraph\")\n    return (\n      <DataCellStyled\n        className=\"dataCellGraph\"\n        style={style}\n        data-testid=\"dataCellGraph\"\n      >\n        {isOpen && (\n          <>\n            <TotalHeading\n              dangerouslySetInnerHTML={{\n                __html: utils.formatCurrencyForDisplay(total),\n              }}\n            />\n            <Graph data={graphData} total={total} />\n          </>\n        )}\n      </DataCellStyled>\n    )\n  },\n  (prevProps, nextProps) => {\n    // if same return true to skip re-rendering\n    const h1 = sha256(JSON.stringify(prevProps)).toString()\n    const h2 = sha256(JSON.stringify(nextProps)).toString()\n    if (h1 === h2) return true\n    return false\n  }\n)\n\nexport default DataCellGraph\n\nDataCellGraph.propTypes = {\n  columnObject: PropTypes.object.isRequired,\n  rowData: PropTypes.object.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  style: PropTypes.object.isRequired,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\n\nconst DataCellStyled = styled.div`\n  position: relative;\n  padding: 20px;\n`\n\nconst FontAwesomeIconStyled = styled(FontAwesomeIcon)`\n  padding-right: 10px;\n  width: 20px;\n`\n\nconst TextIdStyled = styled.span`\n  width: calc(100% - 25px);\n  display: inline-block;\n`\n\nconst DataCellCampaignId = React.memo((props) => {\n  const { text, isOpen } = props\n  return (\n    <DataCellStyled\n      className=\"dataCellCampaignId\"\n      style={props.style}\n      data-testid=\"dataCellCampaignId\"\n    >\n      {isOpen && (\n        <>\n          <FontAwesomeIconStyled\n            size=\"lg\"\n            color=\"#3F51B5\"\n            icon={faAngleRight}\n          />\n          <TextIdStyled>{text}</TextIdStyled>\n        </>\n      )}\n    </DataCellStyled>\n  )\n})\n\nexport default DataCellCampaignId\n\nDataCellCampaignId.propTypes = {\n  text: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  style: PropTypes.object.isRequired,\n}\n","import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport { VariableSizeGrid as Grid } from \"react-window\"\nimport AutoSizer from \"react-virtualized-auto-sizer\"\nimport StyledComponents from \"./DataTableStyledComponents\"\nimport ColumnHeading from \"./ColumnHeading\"\n\nimport DataCellGraph from \"./DataCellGraph\"\nimport DataCellCampaignId from \"./DataCellCampaignId\"\n\nconst dataTableGraphRecords = [\n  {\n    heading: \"App and Installs\",\n    key: \"aj_app_and_installs\",\n  },\n  {\n    heading: \"CoH Real Acquisition\",\n    key: \"aj_coh_0w_and_real_acquisition\",\n  },\n]\n\nconst TableStyled = styled.table`\n  width: 100%;\n  table-layout: fixed;\n  height: 90vh;\n  overflow-y: scroll;\n  border-collapse: collapse;\n`\n\nconst HeaderRowStyled = styled.tr`\n  background: #f2f2f2;\n  padding: 15px;\n`\n\nconst DataTable = React.memo(({ data, show }) => {\n  const [campaignColumnOpen, setCampaignColumnOpen] = useState(true)\n  const [graphColumnsOpenArray, setGraphColumnsOpenArray] = useState(\n    new Array(dataTableGraphRecords.length).fill(true)\n  )\n\n  const handleToggleGraphColumnShow = (index) => {\n    setGraphColumnsOpenArray((prev) =>\n      prev\n        .slice(0, index)\n        .concat(!prev[index])\n        .concat(prev.slice(index + 1))\n    )\n  }\n  const handleToggleCampaignIdColumnShow = () => {\n    setCampaignColumnOpen((prev) => !prev)\n    // for reflowing highchart\n    window.dispatchEvent(new Event(\"resize\"))\n  }\n\n  // eslint-disable-next-line react/prop-types\n  const Cell = ({ columnIndex, rowIndex, style }) => {\n    // console.log(rowIndex, columnIndex);\n    const rowData = data[rowIndex]\n    const isCampaignColumnOpen = campaignColumnOpen\n\n    if (columnIndex === 0) {\n      return (\n        <DataCellCampaignId\n          style={style}\n          text={rowData.groups.Campaign.metadata.name}\n          isOpen={isCampaignColumnOpen}\n        />\n      )\n    }\n    const columnObject = dataTableGraphRecords[columnIndex - 1]\n    return (\n      <DataCellGraph\n        style={style}\n        isOpen={graphColumnsOpenArray[columnIndex - 1]}\n        columnObject={columnObject}\n        rowData={rowData}\n      />\n    )\n  }\n\n  return (\n    <>\n      {show && (\n        <>\n          <div className=\"dataTableWrap\">\n            <TableStyled data-testid=\"datatable\">\n              <thead>\n                <HeaderRowStyled>\n                  <ColumnHeading\n                    handleToggleColumnShow={handleToggleCampaignIdColumnShow}\n                    text=\"Campaign Id\"\n                    isGraphHeader={false}\n                    isOpen={campaignColumnOpen}\n                  />\n                  {dataTableGraphRecords.map((item, index) => (\n                    <ColumnHeading\n                      key={index}\n                      isGraphHeader\n                      text={item.heading}\n                      columnKey={item.key}\n                      data={data}\n                      handleToggleColumnShow={() =>\n                        handleToggleGraphColumnShow(index)\n                      }\n                      isOpen={graphColumnsOpenArray[index]}\n                    />\n                  ))}\n                </HeaderRowStyled>\n              </thead>\n              <tbody>\n                <AutoSizer>\n                  {({ height, width }) => (\n                    <Grid\n                      className=\"Grid\"\n                      height={height}\n                      columnCount={3}\n                      rowCount={data.length}\n                      width={width}\n                      rowHeight={() => 250}\n                      columnWidth={() => 440}\n                    >\n                      {Cell}\n                    </Grid>\n                  )}\n                </AutoSizer>\n              </tbody>\n            </TableStyled>\n          </div>\n        </>\n      )}\n      <StyledComponents />\n    </>\n  )\n})\n\nDataTable.propTypes = {\n  data: PropTypes.array.isRequired,\n  show: PropTypes.bool.isRequired,\n}\nexport default DataTable\n","import { REQUEST_TABLE_DATA } from \"./actionTypes\"\n\nexport const requestTableData = () => ({\n  type: REQUEST_TABLE_DATA,\n})\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport PuffLoader from \"react-spinners/PuffLoader\"\n\n// eslint-disable-next-line react/jsx-props-no-spreading\nconst LoaderStyled = styled((props) => <div {...props} />)`\n  margin: 100px 0;\n`\n\nfunction Loader() {\n  return (\n    <LoaderStyled data-testid=\"loader\" align=\"center\">\n      <PuffLoader size={100} color=\"#123abc\" />\n    </LoaderStyled>\n  )\n}\n\nexport default Loader\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst ErrorDisplay = React.memo((props) => (\n  <h4 data-testid=\"errorDisplay\" align=\"center\" style={{ color: \"#F44336\" }}>\n    Error: {props.message}\n  </h4>\n))\n\nErrorDisplay.propTypes = {\n  message: PropTypes.string.isRequired,\n}\n\nexport default ErrorDisplay\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\nimport ReactTooltip from \"react-tooltip\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faRedoAlt } from \"@fortawesome/free-solid-svg-icons\"\n\nconst HeadStyled = styled.div`\n  border-bottom: solid 1px #eee;\n`\nconst HeadingText = styled.h3`\n  display: inline-block;\n  margin-bottom: 5px;\n`\nconst HeadingSubText = styled.h4`\n  font-weight: normal;\n  margin-top: 0;\n  color: #767676;\n  font-weight: bold;\n`\nconst FontAwesomeIconStyled = styled(({ isLoading, ...rest }) => (\n  <FontAwesomeIcon {...rest} />\n))`\n  float: right;\n  cursor: pointer;\n  margin-top: 20px;\n  animation: ${(props) =>\n    props.isLoading ? \"spin 1s linear infinite\" : \"null\"};\n`\n\nfunction Head({ isLoading, fetchTableData, subtitle, title }) {\n  return (\n    <HeadStyled data-testid=\"cardHead\">\n      <FontAwesomeIconStyled\n        isLoading={isLoading}\n        data-tip=\"Reload Data\"\n        icon={faRedoAlt}\n        onClick={fetchTableData}\n      />\n      <HeadingText>{title}</HeadingText>\n      <HeadingSubText dangerouslySetInnerHTML={{ __html: subtitle }} />\n      <ReactTooltip place=\"bottom\" effect=\"solid\" />\n    </HeadStyled>\n  )\n}\nHead.propTypes = {\n  fetchTableData: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  subtitle: PropTypes.string.isRequired,\n}\nexport default Head\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\nimport Head from \"./Head\"\n\nconst CardStyled = styled.div`\n  background-color: #fff;\n  padding: 0 15px 25px;\n  box-shadow: #eee 2px 2px;\n  margin: 30px auto;\n  width: 80%;\n  // height: calc(100vh - 140px);\n`\n\nconst CardBody = styled.div`\n  padding: 20px 0px;\n`\n\nconst Card = React.memo((props) => (\n  <CardStyled data-testid=\"card\">\n    <Head\n      fetchTableData={props.fetchTableData}\n      title={props.title}\n      isLoading={props.isLoading}\n      subtitle={props.subtitle}\n    />\n    <CardBody>{props.children}</CardBody>\n  </CardStyled>\n))\n\nCard.propTypes = {\n  fetchTableData: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  children: PropTypes.object.isRequired,\n}\n\nexport default Card\n","import React, { useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from \"redux\"\nimport PropTypes from \"prop-types\"\nimport NavHeader from \"components/navHeader\"\nimport DataTable from \"components/datatable\"\nimport * as utils from \"utils\"\nimport * as requestTableDataFunctions from \"actions/actionCreators\"\nimport Loader from \"components/loader\"\nimport ErrorDisplay from \"components/error\"\nimport Card from \"./card\"\n\nconst CARD_TITLE = \"Your Facebook Campaigns' Data\"\n\nconst extractStartingDate = (tableData) => {\n  if (tableData.fetched && tableData.data.length !== 0)\n    return tableData.data[0].trend[0].day\n  return null\n}\n\nconst extractEndingDate = (tableData) => {\n  if (tableData.fetched && tableData.data.length !== 0) {\n    const { trend } = tableData.data[0]\n    return trend[trend.length - 1].day\n  }\n  return null\n}\n\nexport const Home = ({ tableData, requestTableDataAction }) => {\n  const startingDate = extractStartingDate(tableData)\n  const endingDate = extractEndingDate(tableData)\n  const subtitle = `Showing Data From ${utils.formatDateForDisplay(\n    startingDate\n  )} to ${utils.formatDateForDisplay(endingDate)}`\n\n  const fetchTableData = React.useCallback(() => {\n    requestTableDataAction.requestTableData()\n  }, [requestTableDataAction])\n\n  useEffect(() => {\n    fetchTableData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <div data-testid=\"home\">\n      <NavHeader />\n      <Card\n        fetchTableData={fetchTableData}\n        title={CARD_TITLE}\n        subtitle={\n          (tableData.fetched && tableData.data.length !== 0 && subtitle) || \"\"\n        }\n        isLoading={!tableData.fetched}\n      >\n        <>\n          <DataTable\n            data={tableData.data || []}\n            show={(tableData.fetched && tableData.data.length !== 0) || false}\n          />\n          {tableData.fetched && !tableData.data && (\n            <ErrorDisplay message={tableData.errorMsg} />\n          )}\n          {!tableData.fetched && <Loader />}\n        </>\n      </Card>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  tableData: state.tableData,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestTableDataAction: bindActionCreators(\n    requestTableDataFunctions,\n    dispatch\n  ),\n})\nHome.propTypes = {\n  tableData: PropTypes.object.isRequired,\n  requestTableDataAction: PropTypes.object.isRequired,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n","import React from \"react\"\nimport Home from \"./components/home\"\nimport \"./App.css\"\n\nconst App = () => {\n  return (\n    <div className=\"App\" data-testid=\"app\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport configureStore from \"./store/configureStore\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"./index.css\"\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, compose, applyMiddleware } from \"redux\"\nimport rootReducer from \"reducers\"\nimport createSagaMiddleware from \"redux-saga\"\nimport { logger } from \"redux-logger\"\nimport rootSaga from \"sagas/index\"\nimport initialState from \"./initialState\"\n\nexport default function configureStore() {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(applyMiddleware(sagaMiddleware, logger))\n  )\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n"],"sourceRoot":""}